
import AppKit

extension NSColor {
    static func systemName(_ name: String) -> Any? {
        let allColors: [String: Any] = [
            "labelColor": NSColor.labelColor as NSColor,
            "secondaryLabelColor": NSColor.secondaryLabelColor as NSColor,
            "tertiaryLabelColor": NSColor.tertiaryLabelColor as NSColor,
            "quaternaryLabelColor": NSColor.quaternaryLabelColor as NSColor,
            "textColor": NSColor.textColor as NSColor,
            "placeholderTextColor": NSColor.placeholderTextColor as NSColor,
            "selectedTextColor": NSColor.selectedTextColor as NSColor,
            "textBackgroundColor": NSColor.textBackgroundColor as NSColor,
            "selectedTextBackgroundColor": NSColor.selectedTextBackgroundColor as NSColor,
            "keyboardFocusIndicatorColor": NSColor.keyboardFocusIndicatorColor as NSColor,
            "unemphasizedSelectedTextColor": NSColor.unemphasizedSelectedTextColor as NSColor,
            "unemphasizedSelectedTextBackgroundColor": NSColor.unemphasizedSelectedTextBackgroundColor as NSColor,
            "linkColor": NSColor.linkColor as NSColor,
            "separatorColor": NSColor.separatorColor as NSColor,
            "selectedContentBackgroundColor": NSColor.selectedContentBackgroundColor as NSColor,
            "unemphasizedSelectedContentBackgroundColor": NSColor.unemphasizedSelectedContentBackgroundColor as NSColor,
            "selectedMenuItemTextColor": NSColor.selectedMenuItemTextColor as NSColor,
            "gridColor": NSColor.gridColor as NSColor,
            "headerTextColor": NSColor.headerTextColor as NSColor,
            "alternatingContentBackgroundColors": NSColor.alternatingContentBackgroundColors as [NSColor],
            "controlAccentColor": NSColor.controlAccentColor as NSColor,
            "controlColor": NSColor.controlColor as NSColor,
            "controlBackgroundColor": NSColor.controlBackgroundColor as NSColor,
            "controlTextColor": NSColor.controlTextColor as NSColor,
            "disabledControlTextColor": NSColor.disabledControlTextColor as NSColor,
            "currentControlTint": NSColor.currentControlTint as NSControlTint,
            "selectedControlColor": NSColor.selectedControlColor as NSColor,
            "selectedControlTextColor": NSColor.selectedControlTextColor as NSColor,
            "alternateSelectedControlTextColor": NSColor.alternateSelectedControlTextColor as NSColor,
            "scrubberTexturedBackground": NSColor.scrubberTexturedBackground as NSColor,
            "windowBackgroundColor": NSColor.windowBackgroundColor as NSColor,
            "windowFrameTextColor": NSColor.windowFrameTextColor as NSColor,
            "underPageBackgroundColor": NSColor.underPageBackgroundColor as NSColor,
            "findHighlightColor": NSColor.findHighlightColor as NSColor,
            "highlightColor": NSColor.highlightColor as NSColor,
            "shadowColor": NSColor.shadowColor as NSColor,
            "alternateSelectedControlColor": NSColor.alternateSelectedControlColor as NSColor,
            "controlAlternatingRowBackgroundColors": NSColor.controlAlternatingRowBackgroundColors as [NSColor],
            "controlHighlightColor": NSColor.controlHighlightColor as NSColor,
            "controlLightHighlightColor": NSColor.controlLightHighlightColor as NSColor,
            "controlShadowColor": NSColor.controlShadowColor as NSColor,
            "controlDarkShadowColor": NSColor.controlDarkShadowColor as NSColor,
            "headerColor": NSColor.headerColor as NSColor,
            "knobColor": NSColor.knobColor as NSColor,
            "selectedKnobColor": NSColor.selectedKnobColor as NSColor,
            "scrollBarColor": NSColor.scrollBarColor as NSColor,
            "secondarySelectedControlColor": NSColor.secondarySelectedControlColor as NSColor,
            "selectedMenuItemColor": NSColor.selectedMenuItemColor as NSColor,
            "windowFrameColor": NSColor.windowFrameColor as NSColor,
//            "quaternarySystemFill": NSColor.quaternarySystemFill as NSColor,
            "quinaryLabel": NSColor.quinaryLabel as NSColor,
//            "quinarySystemFill": NSColor.quinarySystemFill as NSColor,
//            "secondarySystemFill": NSColor.secondarySystemFill as NSColor,
//            "systemFill": NSColor.systemFill as NSColor,
//            "tertiarySystemFill": NSColor.tertiarySystemFill as NSColor,
//            "textInsertionPointColor": NSColor.textInsertionPointColor as NSColor,
//            "transferRepresentation": NSColor.transferRepresentation as TransferRepresentation,
            "systemBlue": NSColor.systemBlue as NSColor,
            "systemBrown": NSColor.systemBrown as NSColor,
            "systemCyan": NSColor.systemCyan as NSColor,
            "systemGray": NSColor.systemGray as NSColor,
            "systemGreen": NSColor.systemGreen as NSColor,
            "systemIndigo": NSColor.systemIndigo as NSColor,
            "systemMint": NSColor.systemMint as NSColor,
            "systemOrange": NSColor.systemOrange as NSColor,
            "systemPink": NSColor.systemPink as NSColor,
            "systemPurple": NSColor.systemPurple as NSColor,
            "systemRed": NSColor.systemRed as NSColor,
            "systemTeal": NSColor.systemTeal as NSColor,
            "systemYellow": NSColor.systemYellow as NSColor,
            "clear": NSColor.clear as NSColor,
            "black": NSColor.black as NSColor,
            "blue": NSColor.blue as NSColor,
            "brown": NSColor.brown as NSColor,
            "cyan": NSColor.cyan as NSColor,
            "darkGray": NSColor.darkGray as NSColor,
            "gray": NSColor.gray as NSColor,
            "green": NSColor.green as NSColor,
            "lightGray": NSColor.lightGray as NSColor,
            "magenta": NSColor.magenta as NSColor,
            "orange": NSColor.orange as NSColor,
            "purple": NSColor.purple as NSColor,
            "red": NSColor.red as NSColor,
            "white": NSColor.white as NSColor,
            "yellow": NSColor.yellow as NSColor,

        ]
        let cleanedName = name.replacingOccurrences(of: " ", with: "")
//        .lowercased()
        
        return allColors[cleanedName]
    }
}
